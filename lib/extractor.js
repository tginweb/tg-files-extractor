const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

function extractFiles(sourceFile) {
    try {
        const content = fs.readFileSync(sourceFile, 'utf-8');
        const baseDir = process.cwd();
        let fileCount = 0;
        let dirCount = 0;

        // –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
        const sections = content.split(/(?:\/\* ==== (.*?) ==== \*\/)/);

        // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
        for (let i = 1; i < sections.length; i += 2) {
            const filePath = sections[i].trim();
            let fileContent = sections[i + 1] || '';

            // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
            fileContent = fileContent
                .replace(/^\s*\n/, '')
                .replace(/\n\s*$/, '');

            const fullPath = path.resolve(filePath);
            const dir = path.dirname(fullPath);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                dirCount++;
                console.log(chalk.blue(`üìÅ Created directory: ${path.relative(baseDir, dir)}`));
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            fs.writeFileSync(fullPath, fileContent);
            fileCount++;
            console.log(chalk.green(`üìÑ Created file: ${path.relative(baseDir, fullPath)}`));
        }

        return {
            fileCount,
            dirCount,
            baseDir
        };
    } catch (error) {
        throw new Error(`Extraction failed: ${error.message}`);
    }
}

module.exports = {
    extractFiles
};
